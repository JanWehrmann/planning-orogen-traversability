name "traversability"
# Optionally declare the version number
# version "0.1"

import_types_from "base"
import_types_from "envire/operators/SimpleTraversability.hpp"
import_types_from "envire/operators/TraversabilityGrassfire.hpp"
import_types_from "envire"
using_library "envire"


task_context "Simple" do
    needs_configuration

    property("env_name", "std/string", "/traversability/").
        doc "the envire prefix that should be used to create new maps"

    property("map_extents", "/std/vector<base/Vector2d>").
        doc "If necessary the size of the input map will be extended, such that the output always contains the provided points in world coordinates."

    property("map_max_extent", "/int", 1000).
        doc "Number of maximum patches per dimension x/y."

    property("env_save_path", "std/string").
        doc "if set to a non-empty string, save each generated environment under env_save_path/<seq number>/"

    property("mls_id", "std/string", "/slam/mls").
        doc "the map ID of the input MLS map. The terrain type information is expected to be encoded as RGB value on the MLS"

    property("traversability_conf", "/envire/SimpleTraversabilityConfig").
        doc "configuration parameters for the traversability transformation"

    input_port('mls_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Current map")

    output_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc('Traversability map').
        keep_last_written_value(false)

    port_driven
end

task_context "Grassfire" do
    needs_configuration

    property("config", "/envire/TraversabilityGrassfire/Config").
        doc "configuration parameters for the traversability transformation"

    property("growTerrainRadius", "double", 0.0).
        doc "If this number is bigger than 0, all terrains will be grown by this value. Terrains with better traversabilty will be overwritten by terrains with with worse terrains"

    input_port('mls_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Input map")

    transformer do
        transformation("body_center", "mls_map")
        max_latency(0.1)
    end

    output_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
	doc('Traversability map').
        keep_last_written_value(false)

    port_driven
end

